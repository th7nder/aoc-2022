// keep track of the heighest element.
// chamber is 7 units wide
// floor is at 0
// new_shape.y = 3 units away from the heighest
// new_shape.x = 2 units away from the wall

// 1. jet push
// 2. fall down

// there are 5 types of rocks

// each shape is a own grid 4x4
// after it's settle, we copy it to the main grid.
// shape consists of points
// if any of the points moves down and collides down, then stop vertically
// if jet doesn't push, then doesn't push.
// jet only affects the falling rock

// first let's model shape
// then model Chamber
// then spawn 1 rock, and see whether this falls down correctly.
// then model movement
// then parse movements
// then simulate.


// OPTIONS TO CONSIDER:
// - some shapes have limited movement types
// - ...####
// - ..####. -> the best case it can go right
// - .####..
// - ####...
// -> track highest point of each column
// -> if the middle is blocked -> THIS IS THE STOP
// -> but what about the jet?
// -> we need to know where it lands, so the next ones will know where to look
//
// the question is
// how can we figure where it lands without the simulation?
// then we will know if the highest point changed?

// ultimate question -> what's the highest point?
// to know what's the highest point, we need to know where it falls
// to know where it falls we need to know where it'll end up pushed by the beam

// what if there was no yet?
// if the number is divisible by 5 ofc
// sets? 2020 / 5
// rock_0 + rock_1 height / number of rocks.
//         3064 for 2020 rocks
// set max_height = 13, 5252 = 404 * 13
// set min_height = 4 
// ))@...%
// ))@.$.%
// @@@$$$%
// ####$.%
// 1_000_000_000_000
// if something becomes a new floor, then clear bottom ones.

// what is a bottleneck, really?
// why the program is slow?
// what's the bottleneck?


use std::collections::HashSet;

#[derive(Clone, Copy, Debug)]
enum Direction {
    Down,
    Left,
    Right,
}

impl Direction {
    fn parse(directions: &str) -> Vec<Direction> {
        directions
            .chars()
            .map(|c| match c {
                '<' => Direction::Left,
                '>' => Direction::Right,
                _ => panic!("Unknown direction"),
            })
            .collect()
    }
}

struct Rock {
    pebbles: Vec<(i32, i32)>,
    idx: u8,
}

impl Rock {
    fn can_advance(&self, dir: Direction, chamber: &Chamber) -> bool {
        let (delta_x, delta_y) = match dir {
            Direction::Down => (0, -1),
            Direction::Left => (-1, 0),
            Direction::Right => (1, 0),
        };

        let mut can_move = true;
        for (x, y) in &self.pebbles {
            let next_x = x + delta_x;
            let next_y = y + delta_y;
            if next_y < 0
                || next_x < 0
                || next_x >= 7
                || chamber.pebbles.contains(&(next_x, next_y))
            {
                can_move = false;
                break;
            }
        }

        can_move
    }

    fn advance(&mut self, dir: Direction, chamber: &Chamber) -> bool {
        let (delta_x, delta_y) = match dir {
            Direction::Down => (0, -1),
            Direction::Left => (-1, 0),
            Direction::Right => (1, 0),
        };

        let can_move = self.can_advance(dir, chamber);
        if can_move {
            self.pebbles = self
                .pebbles
                .iter()
                .map(|(x, y)| (*x + delta_x, *y + delta_y))
                .collect();
        }

        can_move
    }

    fn new(idx: u8, (start_x, start_y): (i32, i32)) -> Rock {
        let pebbles = match idx {
            // ####
            0 => vec![(0, 0), (1, 0), (2, 0), (3, 0)],
            // .#.
            // ###
            // .#.
            1 => vec![(1, 0), (0, 1), (1, 1), (2, 1), (1, 2)],
            // ..#
            // ..#
            // ###
            2 => vec![(0, 0), (1, 0), (2, 0), (2, 1), (2, 2)],
            // #
            // #
            // #
            // #
            3 => vec![(0, 0), (0, 1), (0, 2), (0, 3)],
            // ##
            // ##
            4 => vec![(0, 0), (1, 0), (0, 1), (1, 1)],
            _ => panic!("Unknown type of rock"),
        };

        Rock {
            idx,
            pebbles: pebbles
                .iter()
                .map(|p| (start_x + p.0, start_y + p.1))
                .collect(),
        }
    }
}

struct Chamber {
    pebbles: HashSet<(i32, i32)>,
    highest_y: i32,
    pattern: Vec<Direction>,
    current_pattern: usize,
}

impl Chamber {
    fn new(pattern: Vec<Direction>) -> Chamber {
        Chamber {
            pebbles: HashSet::new(),
            highest_y: 0,
            pattern,
            current_pattern: 0,
        }
    }

    fn spawn_rock(&self, rock_idx: u8) -> Rock {
        Rock::new(rock_idx, (2, self.highest_y + 3))
    }

    fn drop_rock(&mut self, mut rock: Rock) {
        // println!("The rock begins falling");
        // self.print_with_rock(&rock);

        let mut xd = 0;
        loop {
            let jet = self.pattern.get(self.current_pattern).unwrap();
            self.current_pattern = (self.current_pattern + 1) % self.pattern.len();

            let pushed = rock.advance(*jet, self);
            // println!("Jet of gas pushes rock {:?}, but {}", *jet, pushed);
            // self.print_with_rock(&rock);
            if !rock.advance(Direction::Down, self) {
                // println!("Can't go down");
                break;
            }
            // println!("Rock falls 1 unit");
            // self.print_with_rock(&rock);
            xd += 1;
        }
        if xd > 40 { 
            println!("looped that many times: {}, type: {}", xd, rock.idx);
        }

        for pebble in &rock.pebbles {
            self.pebbles.insert(pebble.clone());
            // let mut new_floor = true;
            // for x in 0..7  {
            //     if !self.pebbles.contains(&(x, pebble.1)) {
            //         new_floor = false;
            //     }
            // }
            // if new_floor {
            //     self.pebbles = HashSet::new();
            //     for x in 0..7 {
            //         self.pebbles.insert((x, pebble.1));
            //     }
            // }

        }

        for (x, y) in rock.pebbles {
            if y >= self.highest_y {
                self.highest_y = y + 1;
            }
        }

        // self.print();
    }

    fn print(&self) {
        for y in (0..=self.highest_y + 5).rev() {
            print!("|");
            for x in 0..7 {
                if self.pebbles.contains(&(x, y)) {
                    print!("#");
                } else {
                    print!(".");
                }
            }
            println!("|");
        }
        println!("+-------+");
        println!();
    }

    fn print_with_rock(&self, rock: &Rock) {
        for y in (0..=self.highest_y + 5).rev() {
            print!("|");
            for x in 0..7 {
                if rock.pebbles.contains(&(x, y)) {
                    print!("@")
                } else if self.pebbles.contains(&(x, y)) {
                    print!("#");
                } else {
                    print!(".");
                }
            }
            println!("|");
        }
        println!("+-------+");
        println!();
    }
}

pub fn solve() {
    let mut chamber =
    Chamber::new(Direction::parse("><<<><<>>>><<><<<<>>>><<<>>><<<>>>><<<><>><<<>>>><<<><>>><<>>>><>>>><>><<<>>><<<<>><>><<>>><<<<>>>><>>><<<>><<<<><<<<>>><<>>>><><>>><<<<>><<>>>><<><<<<><<>>>><<<><<><>>>><<<><<<>>><<<>>>><<<>>><<>>>><<<><<<<>>>><<>><<<<>>>><<>>>><<<>><<>>>><>>>><<<<>>><>>>><>>>><<<<>><<<>><<<>>>><<<>>>><<<><<<>>>><>><<>><>>><<<>>><>><<<<><<<<><>>><<>>>><<<<>>>><<<<><<<>>>><><<>>><<<>>>><<<>>>><><<>>><<<>>><<<<>><<<<>>>><>><<<<><<<>>><<>>>><>><<<>>>><<<>>>><<>>>><<<><>><>>><<<>><>>>><<<<>><<<>><<><<<<>>><<<>>>><>>><<<>>><<<<>>><<>><<><<<<>>>><>><>>>><>>>><<<>>>><>>><<<>>><<<<>>><<>>>><<>>><<<>>><<>>><<<>><<<>>><<<>><>>><<>><<<><<><<<<><<<<>><>><><>>><<<><>><<<>>>><<<>>>><<<>><<<>><<<>>>><>><<<><<<><>>><<<>><<<><<<<><>>><<<<>>>><>>><<<>><><<>>>><<<>><<<>>>><<<>>><<><<>><<<<><<>>>><<<>><<<<>>>><<>>><<<<>>><<>>><<<<><><<<<>>>><<>>>><>>>><<<>>><<<<>><<>>><<<>><<>>>><>>>><<<>><<<>>><<<>><<>><<>>>><<<<>><<>><<>>>><<>>><<>>><<<>>><<<<>>><<>><<<>><>>>><<<<><<>>>><<<<>>><>>><>><>><<<<><>>>><<<<><<<<>>><<<<>>>><>>><<<<><<<>>>><<<>>><><>>>><>><>><<<<>>><<<<>>>><<<<>>><<<<>><<<>>>><<<><<>>><>><>><<>>>><>><<<<>><<><>><<<>>><><<>>>><>>>><>>>><<<>>>><<<>>>><<<>>><<>>>><<<<>><<<><<<>>>><<<<>>>><<<<>><<>><<<<>><<><>>><><<<<><><>><<>>>><<<<>>>><>>>><<<>>><<>>>><>>><<>>>><<<<><<>>>><<<>>>><>>><<>>>><>>><>><<<<><><>><<<<>>>><>>>><<>>>><<<<>>>><>>>><<><<<>><<<>><<<><<<<>>>><<>>><<>>><<><<<>>><<<>>>><<<>>>><<<<><<<<><<<>>><>>>><<<>><<<>>>><<<>>>><<<<>>><<>>>><>>>><>><<<<>><<>><>><<<<>>>><<><<<><<<<>>><<<>><<<>>><>>><<<<><<>>><<>><<>>>><<>><<><<<>><<<>>>><<><<<<>>>><<<<>>>><<<>><<<>><<<<>>>><<<>><<<<>>><>>>><<<<>><><><<>>><<<><<<>><><<<>>>><<>>>><<>>>><<<>>>><<<<>><<<<>>><<>><<<<>>><<<>><<<><<<<>><>>><<<><<<<>>>><<<<>>><<><<>><><<<<><<>><>>>><<<><<<<>>><<>><<<<>><<<>>>><<>>>><<><>>>><><<<>>>><<<<><><<<<>>><<<>>><<<><<<<>>>><<<<>>>><<<<>>>><<<<><><<<<>>><<<<>><>>><>>><<<>><>>>><<<<>><>><<<<><<<><>><<>>>><<<<><<<><<<>>><<<>>>><>>><<><<>><<<<><<<>>>><<<<>><<>>>><><<<<><><<>><<<><<<<><<>>><<>><<<>>>><<<<>>><<<>>>><<<<>>>><<<<>>><<<<>><<<<>><<<>>>><><<>>>><>>>><<<<>><><<<><><<<>>>><>>>><<>><>>>><>><<<<>>><<>>>><<>><<<<><<<<>>>><>><>>><<<<>><><<<>><<><<<<>><<>><<<<><<>><>>>><<<>><<<>>>><<<>>>><<<>>>><<<>>><<><<<><<>>><<>><<>>>><<<<>><<<<><<<<>>><>><>>>><<<<>>>><<<>>><<>>><<>>><<>><<<>><>>>><>>><>><>><<>>>><><<<<>><<<<><>>><<<>>><<<<>>><<><<>>><>><<><<<<>>>><<>>><<<<>>>><<<<><<<<>><><<<<>>><<<>><<<<>>>><<>>><<>><<<<>>><<>>><<<>><>>>><>>>><><<>><<<>>>><<<<>>>><<><<<<>>>><<<><<><<<<><<<<>>><<<<><<<<><<>><<<<>>>><<>><<<<>><<>>><<<>>>><<<><<<>><<<>>><>>><>><<<>><<>><<<>><<<>><<<<>>>><<<<>><>><<>>><<<><>><<<<>>><<<<>>><><<><<<<>>><<>>>><<<<>>>><<<<><>>>><<<<>>>><<<>>>><<<<>><<>><<>>><><>><>>><>>>><>>><>>>><<<>>><<><>>><>>><><>>>><<<><<>>>><<><<<><<>>><><<<>>><<>><<<<>><<<><>><<>><<<>><<<<>><<>><<>><>>>><>>><<<<>>>><<>>><<<>>>><<<<>>>><<><>><<>><<<<>>><>>>><>>><<>><<>>>><>>>><<>>>><<<>>><<>><<<><<<<>>><<><<>>><<<>>><><>><<<<>><<><<<>><><<<<><><<<><<<><<<<>><<>>>><<>><<<>>><<<><<<<>><<>><<<>>><<<<><>>><><<<<>>><<><<><>><>>>><>>><<<<><<>>><<<>><<<>><<<>>><>><>>>><<<>>><<<>>><><>>><<><<>><<<><<<>><<>>><<>>>><<<>>><<><>><>><<<>>><<<<>><<<><>>>><<<>>>><<>>>><<<<>>>><<<>>>><<>>>><<<><<<><<<>><>>>><<>>><>>>><<>>><<<>>>><>>>><<<<>>>><>>>><<<><<<<>><<<>>>><<<>>><<<>>>><<<<>><<<>><<<>>>><<<<>>>><<<<>>>><<<>>><>>><>>>><<<<>><<>>><>>>><>>><>>><<<>>><<>>>><<<<>>>><>>><<<>><<>><<><<<>>>><>>><<><>>><<>>><<>>><<<<>><<<>>>><<<><<<<><<><<<<>>><<>>>><<<>><>><<>>><<<<>>>><<>>>><<<<>>>><<<>>><<<>>>><>>><<><<<<>><<<><<<<>>>><>>><<<<>>><<<<>><<<>>>><>><<<<><<<><<<>>>><<<>>><>>>><<<<>><<<<>>><<>>>><>>>><<<>>>><<><>>><<<><<<<><<<<>><><<<<>><>>><<>>><<<>><<<<>>>><<<<>><<<<><<<<>><<<>>>><<<<>>><<<>><<<>><<<<>><>>>><>><<<>>>><<<<>>>><<><<<>><><<<><<>>><>>>><><<<<>>>><<>><<<>>>><<<<>><<<<><>>>><<<>>><<<<><<<><>><<<>>><>><<<><<<<><<<>>>><<<<>>>><<<>>>><<<<><>><<<<>>><<<><<>>><>><<>><<<<>><<>>>><>><<>><<<><<>>><<>><<<<>><<<<>>>><<>>><<<>>><<><>>>><<>>>><<><<<>><<<>>><>><><<<<>>>><>>><<>><<><<<<>>>><<>>>><<<>><<<>>><<<<>>>><>>>><<>><>>><<<>><>><>>>><<<<><<>>>><>>>><><>>><<<>><<<>><<<><>>>><<>>>><<<<>>><<><<>>>><<<<>>>><><<<>><<<>>><<<>>>><<>>>><<<<><<<<>>><<<<>><>>><<<>>>><>>><<<<>>><<>>><<<>>>><<><<>>><<<><<<>>>><<<>>><<<><><<<<>><<<>>>><<><<<<><>>>><><<<>>><<<>><<<>>><>>><<<>>>><<><<<><<>>><<>><<>>>><<<>><<>>>><<>><<<>>>><<<>><<<>><><<><<<>><<<>>><>><>>>><<>><<>><<>><<<>>><<<<>><<>>>><<<>><<<><<><<<>>><>><<<>><<>>>><<<<>><<<>><<<>>><<>>><<>>><<<><>><<>>><<>><<<<>>><<><>>><<<>>><<>>>><<<<>><<<<>><>>><><<>>><>>>><<><<<<><<<<><>>>><<>>>><<<<>>><>>><<><<<><>>><<<>>><<<<>>>><<<><>><<<<>><<>>><<<<><>>><>>><<<<>>>><>>><<>><<<>>>><>>>><<>>>><<<<>>><<<>><>>>><<<><><<<<><<<<>>>><<<>>><><<><<<>><>><>><<<<>>><<><<<<>>><<>>>><>>><<><<<<>><<>>>><<><<<<>><<>><>><<<><<><<<>>>><<<<><<<<>>><<>>>><<<<>>><<<<>>>><<<>>>><><<<><>>>><>>><<>>>><<<>>>><>>>><>>><>><>>><>>><<<>>><>>>><>><<<<><<<><<<<>>><<<<>>><<<<>><<<><<<>><<<>>><<<>>>><<>><<>>>><<>>>><><<><><<<<><>><<<<><<<<>>>><<>>>><<<<>>><<><<<>>>><>>><<><<>>><<<<>><>>><<<>>><<>><<<<>>><<<<>>><><<<><><<<>><>>><<>>>><<>><<<<>>><<<<><<<><>><<<<>><><><<>><>>>><<<<><<<>>>><<<<>>>><<>><<<<><><<><>>>><<<>>><<>>>><<<><>>><><<<>>>><<<<><<<<>><<<>><>><<<<>>>><<<<>>><<<>><>><<>>><><<<>>>><<<<>>><<><>>><<>><<<><><<<<>>>><<<>>><<>>>><><>><><<<<>><<<<>>>><>>><><<<>>>><>><><<<<>>>><>>><<<<>><<<<>>>><<><>>>><<<<>><<<<>>>><<<>>><<<<><<<<>><>>><<>>>><<>>>><<<><<>>>><<<>>>><><>>>><<<<>><<<>><<>>><<<<><<<>>>><<>><<<><<><<<<>><<<>><><>>>><<>><<<>>>><<<<>>><<>><<<<><<>><>>><><<<<><>>>><<<>>>><<<<>><>>>><><>><<>>><<<>>>><>><<><<<<>>>><<<>><<<>><<>>><<><<<<>>><<<>><<<>>><<>>>><<>>>><<<<>>>><>><<<><<>><<>>><<<<>><<<>><<<<>>><><>>>><<>>>><>>><>><<<<>>><>>><>>><<<><<>>>><<<>>>><<>>><<<>>><<<>><<<<><>>>><<<>><<<>><<<<>><>>>><<><<<<><>>><<<<>>><<>>><<<<>>><<<><>><<<>>><<>><<<<>>>><<>>><<<<>>>><<<<><<<>><><<<>>>><<<<>>>><<<<>>><<>>>><<>><<>><<<>><<<>><<<<>><><>><>><<<><>>>><<<><<<>><<<><<<>>><<<><<<<>>>><><<>>><><<<<><<<<>>>><<<><<<>><<><<>><<<>>>><><<>>>><<<<>><>><><>>>><<<>>>><<>>>><<>>>><>>><>>><<<<><<<<><<<<><<<<>>><><<<<>>>><><>>>><<<><><<>>><<<<><<<>><<<<>><<>>><><<<<>><><<<>>>><>>>><>>><<<>><>><<<<>><>><<<>>>><<><<>><>><<<<>>><<>><<>>>><<<<>><<<<>><>><<<>>><>><><<<<>><<<<><>><<<>>>><<<<><>>>><<<<>><>>>><>>><<<>>><<>>><>>><<<<>><<><<<>>><>><>>><>>><<<<>>>><<><>>><<>>>><<<<>>>><<>><<<>><>><<<<>>>><<<>><<>><>><>><><<><>><><<>>><<<>><>>>><<<<><<<<><<<<>>><<<<>>>><<<<>>>><<<<>>>><<>><>><<<><>>><<<>>>><<<>>><<<><<>>>><>><<>>>><<><>>><<>><<<<>><>><<<<>>>><<<>>>><<<>>><<<<>>>><<><<>>>><><<>>><>><<>><<<<>>>><<><>><>><<<<>><>><<<<>>>><><<<<><>><<<>>>><<<<>>>><<>>>><<>>><<<<>>><>>>><<><<<<>><>><>><<<<>>>><<>>>><<<<>>><<><<<>><<<>>>><<>>>><>>><>><<<>>><<>>>><><<<<>>>><<<>>>><<><<<>>><><><<<>><<>>>><<<>><<><<<<>><>>><>>><><<>>><<>><<>>>><<>><><<>>><>><>>><>>>><<<<>>>><<<<>><>><<<<>><<<<><<>>>><>>>><<>><<<>>><><<<<>>>><<<<><<><<<<>>><<><>><<<<>><<>><>>>><><<<>>>><<<<>>><<<>>>><<>><<<>>><<<<><>>>><<<<>>>><<<<><<<<>>><<<>><><<<<>><<>>><<<>>>><<>>>><<<><<>><<<<><<><>>>><<<<><>><<<>><<<<>><>><<<>>>><<>><><<<>>><<<<>>>><>>>><<>><<<<><<>>>><<>>><>>><<>>>><>>><<<<>>><<<>>><<<>><<<>>><<>>><<<<>>>><<<>><<<<>>>><<<><<<<>>><<<<>><<<<>>><<<<>><>><<<>>>><>>><<>>>><<>>><<>><>>><<<<>><>>>><<<>>>><<<>>><<<<><>>><>><<>>><>>>><<<>><<>><<>>><<<><>>><<>>><>>><<>>>><>>><<<<><>>>><>><<<>><<<<>><<>>><<>>>><<<>><<<>>><<>>>><<<><<<<>>>><<<>><>>><<<>><<>>><>>><<<>>>><<><<>>>><>><<<<>>>><<><<<>>>><<<<>>><<><<<>>>><<<>><<>><<<<>>><>>>><>>>><<>>><><<<<>>>><<<<>>><<<><<<<>><<<<>><<<<>><<<>><<<<>><>>>><<<><<<<><><<>>>><<>><>><<<<>>><<<>>><<<<>>>><<<>>>><<<>><<<<><<<>>>><<>>><<>><<<><<>>>><<<<>>><>>><<<>>>><>><<>>><<<<>>><<<>>>><><<>><<>><<<<><<>><>>><<<>>><<>>>><<<<>>><<<>>><<<>>><<><<<<>>>><<<>>><><<<><>><<>>>><><>><><<>>><>>><<<<>><<<<>><>>>><><<<><><><<>><>>><<>>><<<<>>>><<><<<<>><<<><>>>><>>><<>>>><>>><><><<<>>>><<<<>>>><<>><<<<>><<><>><>>>><>><<<>>>><><<<>><<<>><<>><<<>>><><>><><<>>><<<>><<<><<<<>>>><>>>><<<<><>>><<<<>>>><>>>><<<>>>><<<<>><<<>>><<><>>><<<<><<>>><<<<><<>>>><<<<>>><>>><<<><<<>><>>><<<<>>>><<<<>>><<>>>><<<<>>>><<<>>><<<<><<<>>><>>>><<><>>><<<>>>><>><<<<><>><>>>><>><<>><>><<>>><<<<>>><>>>><<<<>><<><>>><<<<>>><>>>><>>><<>><<<<>><<><<<>>>><>>><<><<>>>><<>>><<>>>><>>><>>>><<<<><<<<>>><<<><<>>>><<<<>><<<>><<><<><<><<<><<<<><>><<>>>><<<<>>><<<>>><<<<>>><<<><<<>>><<<>>>><<<>>><<<<>><<<<>><<><<<<>>>><<<>>><<>>><>><>><<<><<<<>>><<><<<>>><<<<>>>><>>><<<>>>><<<>><<>>><<<>>><<<>><>><>>>><<<<>>>><<<>><>><<<>><<<<>>>><<>>>><<<<><<><>>><<>>><<<<>>>><<<<><<>>><<<>><>><<<<>>>><<<<>><<<><<><<><><<<<><<>>><<<><<>><<<<><<<<><<<>><>><<<<>>>><<<>><<<<><<>><<<>>>><<>><<>><>><<<<>><>>>><<<<>><<<>><<>>>><<><<<>><<<>>>><<>>>><<<<>><>>><<<<>><>>><<<>>><<>>>><<<<>><<<><>><<><<<>><<>>>><<<>>><>><>>>><<>><>><<>><<<><<<<>>>><<<<>>>><<>>>><<<<>>>><>>>><<>>><>>>><<>>><<<<>><<<<>><<<>><<>>><<<<>>>><<<<>>>><<<>>>><<>><<<>>><<>>>><<>><<>>>><<>>>><<><<<<>><<<>>><<<><<>>><<>><<<<><<>>><<<<>>>><<><<<<><>><<>>><<<<>>>><<<<><<<>>><><>>>><>><<<><>>>><<<>>>><>>><<><<>><><<<<>>>><<>>>><<<><<>>>><>>>><<<<><<<<>>>><<><>>>><>>><><<>>><<<>>><<<<><>><<<>><<<><<<><<<<>><<<>>><<<<>>>><<<>>>><<<>>><<<>>><>>><<>><<<>>><<><<<><>>>><>>><<<<>>><<><<<<>>>><<<><<<<>><<>>>><<>>><<<<>>>><<>>><><<<>>><<>><<>><<>>>><<<<><<<>>><<<<>>><<<<>>>><<<>>>><<<<>>><<<><>>><>>><<>>>><>>><<>>><<>><<>>>><<>>><<<<>>>><<<<>><<<>>>><<<<>>>><<<<>><<<><>><<>><>>><<<<><<<>><><<<>>>><<<>>><<>>><<>>>><<<<>>>><<<><<<>>><<<>><<<>><<<<>>><<<<>><<<>>><<<><<<><<>><><>><<<>>><<<>>><<>>><<<>>><<>>><<<<>><<<>><>><<<<>><<<<>><<>><<<>><<<<>>>><<<><<<<><<<<>><>>><<>><<><<>>><<<><<>>><<<><<<<>><>>><<>><>>><<>>>><<>>>><<<<>><<><<>>><<<>>>><<><<<<>>>><><<<<>>><<<<>><<<<>><<>>><<<<>>>><>>><<<<>><<<<>><><<<<>>>><<<>>><<>><<<<>>><<<><<<>>><>><<>>>><<>>><>><>><<<<>>>><><<<<><>>><<><<>><<<>>><>><<<>>>><<<<>>><<<>><<<<>>>><>><<<>>>><<<>>><<>>>><<>><<<<>>><<>>><<<>><<><>><>><<>><<<><><>>><<<>><<<>><<<<>>><>>><><<<>><<<>>>><<<><<>>>><>>>><>><>>><<<<><<<>><<<<>><<><<<<>>>><<>><<>>>><<<><<<>>><<<<>>><<<>>>><<>>>><<<>>><<<<>><<<>>><>>><>>>><<<>><<<<><<<<><><<<>>><><<<<>><<<>>>><<<<>>>><<><<><<<><<<><><<>>"));

    for i in 0..1_000_000 {
        chamber.drop_rock(chamber.spawn_rock((i % 5).try_into().unwrap()));
        // println!("{}", chamber.highest_y);
        if i % 10000 == 0{
            println!("{}", chamber.highest_y);
        }
    }

    // chamber.print();
    println!("Solution for part1: {}", chamber.highest_y);
}

mod tests {
    use super::*;

    #[test]
    fn sanity() {
        let mut chamber =
            Chamber::new(Direction::parse(">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>"));

        for i in 0..2022 {
            chamber.drop_rock(chamber.spawn_rock((i % 5).try_into().unwrap()));
        }

        // chamber.print();
        assert_eq!(3068, chamber.highest_y);
    }
}
